import { createSlice } from '@reduxjs/toolkit';

// Define the initial state for the cart slice.
// 'items' is an array that will hold all the products added to the cart.
const initialState = {
    items: [],
};

// Create a slice for the cart using createSlice.
// A slice in Redux is a way to organize the state and reducers for a specific feature.
const cartSlice = createSlice({
    // The name of this slice of state, which will be used as a key in the Redux store.
    name: 'cart',

    // The initial state for the slice, which we defined above.
    initialState,

    // Reducers are functions that define how the state can be updated.
    // This object contains all the reducers related to the cart.
    reducers: {
        // A reducer to handle adding items to the cart.
        // The state parameter represents the current state of the slice.
        // The action parameter contains any additional data that is passed when the action is dispatched.
        addItemToCart: (state, action) => {
            // The payload of the action contains the item to be added to the cart.
            const item = action.payload;

            // Check if the item already exists in the cart.
            const existingItem = state.items.find((i) => i.id === item.id);

            if (existingItem) {
                // If the item exists, increase its quantity by 1.
                existingItem.quantity += 1;
            } else {
                // If the item does not exist, add it to the cart with a quantity of 1.
                state.items.push({ ...item, quantity: 1 });
            }
        },

        // A reducer to handle removing items from the cart.
        // This function will remove an item based on its ID.
        removeItemFromCart: (state, action) => {
            // Filter out the item to be removed by its ID.
            state.items = state.items.filter((item) => item.id !== action.payload.id);
        },

        // A reducer to handle updating the quantity of a specific item in the cart.
        // This function will update the quantity of the item based on the provided ID and new quantity.
        updateItemQuantity: (state, action) => {
            // Find the item to update by its ID.
            const { id, quantity } = action.payload;
            const item = state.items.find((i) => i.id === id);

            if (item && quantity > 0) {
                // If the item is found and the new quantity is greater than 0, update the item's quantity.
                item.quantity = quantity;
            } else if (item && quantity === 0) {
                // If the quantity is 0, remove the item from the cart.
                state.items = state.items.filter((i) => i.id !== id);
            }
        },

        // A reducer to clear all items from the cart.
        // This function will reset the cart to its initial empty state.
        clearCart: (state) => {
            state.items = [];
        },
    },
});

// Export the action creators generated by createSlice.
// These are functions that you can call in your components to dispatch the corresponding actions.
export const { addItemToCart, removeItemFromCart, updateItemQuantity, clearCart } = cartSlice.actions;

// This function will be called when actions are dispatched, and it will update the state accordingly.
export default cartSlice.reducer;
